from FireApi import HTTPLite, Service, Request, Response


fn kth_fibonacci(k: Int) raises -> Int:
    if k <= 1:
        return k
    if not (0 < k <= 75):
        raise Error(
            "please submit a number between 1 and 75." + " you entered " + str(k)
        )
    return kth_fibonacci(k - 1) + kth_fibonacci(k - 2)


@value
struct kthFib(Service):
    var endpoint: String
    var method: String

    @always_inline
    fn get_method(self) -> String:
        return self.method

    @always_inline
    fn get_endpoint(self) -> String:
        return self.endpoint

    fn func(self, req: Request) raises -> Response:
        try:
            let k: Int = atol(req.body)
            let result: Int = kth_fibonacci(k=k)
            return Response.success(
                body=str(result),
            )

        except Error:
            return Response.malformed_request_error(
                body=str(Error),
            )


fn main() raises -> None:
    let fib_route = kthFib(
        endpoint="/kth_fibonacci",
        method="GET",
    )

    var server = HTTPLite[kthFib](
        port=9090,
        service=fib_route,
        host_addr="127.0.0.1",
    )

    server.run()
