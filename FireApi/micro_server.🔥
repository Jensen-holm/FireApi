from python import Python, PythonObject
from FireApi.connection import Connection
from FireApi.route import Route
from FireApi.request import Request
from FireApi.response import Response
from FireApi.modules import PyModules


struct HTTPMicroService:
    var _modules: PyModules
    var _py_socket: PythonObject
    var _host_name: PythonObject
    var _host_addr: StringLiteral
    var _port: Int

    fn __init__(
        inout self: Self, host_addr: StringLiteral = "", port: Int = 8080
    ) raises -> None:
        self._port = port
        self._host_addr = host_addr
        self._modules = PyModules()

        self._host_name = self._modules.socket.gethostbyname(
            self._modules.socket.gethostname(),
        )
        self._py_socket = self._modules.socket.socket(
            self._modules.socket.AF_INET,
            self._modules.socket.SOCK_STREAM,
        )
        self.__bind_pySocket()

    fn __bind_pySocket(self) raises -> None:
        try:
            _ = self._py_socket.bind((self._host_addr, self._port))
        except Exception:
            raise Error("error binding pysocket to hostAddr & port")

    # right now we are never using this function and I wonder if that is bad or not ...
    fn __close_socket(self) raises -> None:
        _ = self._py_socket.close()

    fn __print_running[T: Route](self, route: T) -> None:
        let fire = "ðŸ”¥ðŸ”¥ðŸ”¥"
        let endpoint = "http://" + str(
            self._host_name
        ) + "/" + self._port + route.get_endpoint()
        print(fire + "FireApi Micro HTTP Server @ " + endpoint + fire)

    fn __accept_connection(self) raises -> Connection:
        let conn_addr = self._py_socket.accept()
        return Connection(conn_addr=conn_addr, py=self._modules.py)

    fn run[T: Route](self, route: T, _call: Int = 0) raises -> None:
        if not _call:
            self.__print_running[T](route=route)

        _ = self._py_socket.listen()
        let connection: Connection = self.__accept_connection()
        print("connection from:", connection.__str__())
        while True:
            let response: Response = self.__handle_request[T](
                route=route, connection=connection, _call=_call
            )
            _ = connection.send_response(response)
            connection.close()
            self.run[T](route=route, _call=_call + 1)

    fn __handle_request[
        T: Route
    ](self, route: T, connection: Connection, _call: Int) raises -> Response:
        let request_str = connection.recieve_data(size=1024)
        if not request_str:
            return Response(
                status_code=400,
                body="invalid request. Server was unable to recieve data.",
            )

        let request = Request.from_raw(request_str)
        if not request.is_valid():
            return Response(
                status_code=400,
                body="invalid request. client request was deemed invalid.",
            )

        let response: Response = route.func(request=request)
        return response
